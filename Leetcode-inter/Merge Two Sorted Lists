/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        // reutnr list2 if list1 is empty then no need to go through all
        if(list1 == NULL){
            return list2;
        }
        // same as the first one
        if(list2 == NULL){
            return list1;
        }
        // creating a new linkedlist to merger both ones. 
        ListNode *c = new ListNode();
        // another pointer that points to the new linked list so we can iterate through, when we done merging two lists. 
        ListNode *cptr = c;
       //when both of them has values 
        while(list1 != NULL && list2!=NULL){
            //if list1 value is less or equal than list2 value we take list1
            if(list1->val <= list2->val){
                //cptr points to the list1 first value
                cptr->next = list1;
                //then we move to the list1 second value 
                list1 = list1->next;
            }
            else{
                // same logic as the first one
                cptr->next = list2;
                list2 = list2->next;
            }
            //cptr points to the next value that will be coming    
            cptr = cptr->next;
        }
        //when list1 gets empty but not list2 we take the rest of the list2 value
        while(list2 != NULL){
            //cptr points the next list2 value
            cptr->next = list2;
            //then list2 points it's next value
            list2 = list2->next;
            //cptr points to the next one for upcmoing value
            cptr = cptr->next;
        }
        //same logic as the first one
        if(list1 != NULL){
            cptr->next = list1;
            list1 = list1->next;
            cptr = cptr->next;
        }
        //now return the new linkedlist->next so the it can traverse through with the help of the ctpr pointer whoch is pointng to the c; from the beginning and  point to the all of the values. 
        return c->next;
    }
};
